{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Vec3 } from \"gl-matrix\";\nimport { default as quickHull3d, Face } from \"quickhull3d\";\nimport { clamp } from \"./utils\";\nimport Queue from \"tinyqueue\";\n\ntype Point = [number, number, number];\ntype OutFace = [Point, Point, Point];\nconst vec3 = () => new Vec3([0, 0, 0]);\n\nexport function concaveman3dInterop(inputPoints: Point[], concavity: number, lengthThreshold: number): OutFace[] {\n    const points = inputPoints.map(point => new Vec3(point));\n    const concaveHull = concaveman3d(points, concavity, lengthThreshold);\n    return concaveHull.map(face => [inputPoints[face[0]], inputPoints[face[1]], inputPoints[face[2]]]);\n}\n\nexport function concaveman3d(points: Vec3[], concavity: number, lengthThreshold: number, checkAllFaces = true): Face[] {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity == undefined ? 2 : concavity);\n    const sqConcavity = concavity ** 2;\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n    const sqLenThreshold = lengthThreshold ** 2;\n\n    // start with a convex hull of the points\n    const hullFaces = quickHull3d(points);\n    const facesQueue = new Queue(hullFaces);\n    const allFaces = new Set(hullFaces);\n\n    const hullVertices = new Set<number>();\n    const pointAdjacentFaces = points.map(() => new Set<Face>());\n\n    for (const face of hullFaces) {\n        for (const point of face) {\n            hullVertices.add(point);\n            pointAdjacentFaces[point].add(face);\n        }\n    }\n    const internalPoints = (new Set(points.keys())).difference(hullVertices);\n\n    const concaveHull: Face[] = [];\n    while (facesQueue.length > 0) {\n        const face = facesQueue.pop()!;\n\n        const point = findPoint(face, points, checkAllFaces, allFaces, internalPoints, pointAdjacentFaces);\n        if (point != null && decision(face, point, sqConcavity, sqLenThreshold, points)) {\n            const newFaces = dig(face, point, hullVertices, allFaces, internalPoints, pointAdjacentFaces);\n\n            for (const face of newFaces) {\n                facesQueue.push(face);\n            }\n        } else {\n            concaveHull.push(face);\n        }\n    }\n\n    return concaveHull;\n}\n\nfunction dig(\n    face: Face,\n    point: number,\n    hullVertices: Set<number>,\n    allFaces: Set<Face>,\n    internalPoints: Set<number>,\n    pointAdjacentFaces: Set<Face>[],\n): Face[] {\n    pointAdjacentFaces[face[0]].delete(face);\n    pointAdjacentFaces[face[1]].delete(face);\n    pointAdjacentFaces[face[2]].delete(face);\n\n    const newFaces = [\n        [face[0], face[1], point],\n        [face[1], face[2], point],\n        [face[2], face[0], point],\n    ];\n\n    allFaces.delete(face);\n    for (const face of newFaces) {\n        for (const point of face) {\n            pointAdjacentFaces[point].add(face);\n            allFaces.add(face);\n        }\n    }\n\n    internalPoints.delete(point);\n    hullVertices.add(point);\n\n    return newFaces;\n}\n\nfunction decision(\n    face: Face,\n    point: number,\n    sqConcavity: number,\n    sqLenThreshold: number,\n    points: Vec3[],\n): boolean {\n    const v1 = points[face[0]];\n    const v2 = points[face[1]];\n    const v3 = points[face[2]];\n    const p = points[point];\n\n    const sqL12 = v2.sqrDist(v1);\n    const sqL23 = v3.sqrDist(v2);\n    const sqL31 = v1.sqrDist(v3);\n    const sqD1 = p.sqrDist(v1);\n    const sqD2 = p.sqrDist(v2);\n    const sqD3 = p.sqrDist(v3);\n\n    const sqAvg = (sqL12 + sqL23 + sqL31) / 3;\n    const sqDd = Math.min(sqD1, sqD2, sqD3);\n\n    return (sqAvg / sqDd > sqConcavity) && (sqAvg > sqLenThreshold);\n}\n\nfunction findPoint(\n    face: Face,\n    points: Vec3[],\n    checkAllFaces: boolean,\n    allFaces: Set<Face>,\n    internalPoints: Set<number>,\n    pointAdjacentFaces: Set<Face>[],\n): number | null {\n    const v1 = points[face[0]];\n    const v2 = points[face[1]];\n    const v3 = points[face[2]];\n\n    let closestPoint: number | null = null;\n    let sqMinDist = 0;\n\n    const toCheck = Array.from(\n        (checkAllFaces\n            ? allFaces\n            : (pointAdjacentFaces[face[0]]\n                .union(pointAdjacentFaces[face[1]])\n                .union(pointAdjacentFaces[face[2]])))\n            .difference(new Set(face))\n            .values()\n            .map(face => [points[face[0]], points[face[1]], points[face[2]]]));\n\n    for (const candidate of internalPoints) {\n        const p = points[candidate];\n        const sqDist = dTriangle(v1, v2, v3, p);\n        if ((closestPoint == null || sqDist < sqMinDist) && toCheck.every(\n            face => dTriangle(face[0], face[1], face[2], p) >= sqDist)) {\n            closestPoint = candidate;\n            sqMinDist = sqDist;\n        }\n    }\n\n    return closestPoint;\n}\n\nfunction dTriangle(v1: Vec3, v2: Vec3, v3: Vec3, p: Vec3) {\n    // prepare data\n    const v12 = Vec3.sub(vec3(), v2, v1) as Vec3; const p1 = Vec3.sub(vec3(), p, v1) as Vec3;\n    const v23 = Vec3.sub(vec3(), v3, v2) as Vec3; const p2 = Vec3.sub(vec3(), p, v2) as Vec3;\n    const v31 = Vec3.sub(vec3(), v1, v3) as Vec3; const p3 = Vec3.sub(vec3(), p, v3) as Vec3;\n    const nor = Vec3.cross(vec3(), v12, v31) as Vec3;\n\n    if (Math.sign(Vec3.dot(Vec3.cross(vec3(), v12, nor), p1))\n        + Math.sign(Vec3.dot(Vec3.cross(vec3(), v23, nor), p2))\n        + Math.sign(Vec3.dot(Vec3.cross(vec3(), v31, nor), p3)) < 2) {\n        // 3 edges\n        return Math.min(\n            v12.scale(clamp(v12.dot(p1) / Vec3.squaredLength(v12), 0, 1)).sqrDist(p1),\n            v23.scale(clamp(v23.dot(p2) / Vec3.squaredLength(v23), 0, 1)).sqrDist(p2),\n            v31.scale(clamp(v31.dot(p3) / Vec3.squaredLength(v31), 0, 1)).sqrDist(p3));\n    } else {\n        // 1 face\n        return nor.dot(p1) * (nor.dot(p1) / Vec3.squaredLength(nor));\n    }\n}\n"]}